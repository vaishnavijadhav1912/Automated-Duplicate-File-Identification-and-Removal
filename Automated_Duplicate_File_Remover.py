from sys import *
import os
import Hashmodule
import time
import connect
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
import smtplib
import schedule




def Mailsender(sendee, dfiles, scanfiles, filename, Scantime, logtime):
    fromaddr = 'vaishnavijadhav1234@gmail.com'
    toaddr = sendee
    msg = MIMEMultipart()

    msg['From'] = fromaddr
    msg['To'] = toaddr

    body = """
    Hello %s, 
    Please find a logfile attached to this mail.
    Total Number of files scanned : %s
    Total number of duplicates found : %s 
    Time taken to scan the directory : %s

    This is an autogenerated mail.

    Thanks and regards,                         
    """ % (toaddr, scanfiles, dfiles, Scantime)           # number of duplicates found not deleted files

    Subject = 'Logfile generated at %s' % (logtime) ########

    msg['Subject'] = Subject

    msg.attach((MIMEText(body, 'plain')))

    attachment = open(filename, 'rb')

    mbase = MIMEBase('application', 'octet-stream')
    mbase.set_payload((attachment).read())
    encoders.encode_base64(mbase)
    mbase.add_header('content-Disposition', "attachment; filename= %s" % filename)
    msg.attach(mbase)

    send = smtplib.SMTP('smtp.gmail.com', 587)
    send.starttls()
    send.login("vaishnavijadhav1234@gmail.com","katg bmku alcs czui") #ymzp eotp ydhv lceh

    text = msg.as_string()

    send.sendmail(fromaddr, toaddr, text)

    print("Mail successfully sent to ",toaddr)

    send.quit()



   
def deletefiles(dups):
    
    deletedfiles = 0
    cnt = 0
    results = list(filter(lambda x: len(x)>1, dups.values()))

    if len(results) > 0:
        for result in results:  
            for subresult in result:
                deletedfiles = deletedfiles + 1                               
                cnt = cnt + 1
                if cnt >= 2:
                    os.remove(subresult)
                    

            cnt = 0

        print("Duplicate files successfully deleted")

    else:
        print("No duplicates found")
    
    
    return deletedfiles


def logfile(dups): 
    cnt = 0
    separator = "=" * 80
    results = list(filter(lambda x:len (x)>1, dups.values()))
    if not os.path.exists('Duplicate_Files_Remover'):
        try:
            os.mkdir('Duplicate_Files_Remover')
        except:
            pass

    timing = time.ctime()
    clock = timing.replace(" ", "_").replace(":", "")

    filepath = os.path.join('Duplicate_Files_Remover', 'Logfile%s.log'% clock)
    fobj = open(filepath, 'w')

    fobj.write(separator + "\n")
    fobj.write("Duplicate Logfile : %s\n" % time.ctime())
    fobj.write(separator + "\n")
    fobj.write("\n")

    if len(results) > 0:
        for result in results:
            for subresults in result:
                cnt = cnt + 1
                if cnt >= 2:
                    fobj.write('\t%s' % subresults + '\t\t' + time.ctime())
                    fobj.write("\n")
            cnt = 0

    fobj.close()

    print("Logfile successfully created")

    return filepath, time.ctime()

    

    


def Filecheck(filename):
    startTime = time.time()
    flag = os.path.isabs(filename)

    if flag == False:
        filename = os.path.abspath(filename)

    exists = os.path.isdir(filename)

    dups = {}
    cnt = 0
    

    if exists:
        for foldername, subfoldername, files in os.walk(filename):
            for filen in files:
                cnt = cnt + 1
                filepath = os.path.join(foldername,filen)
                filehash = Hashmodule.hashfile(filepath)
                if filehash in dups:
                    dups[filehash].append(filepath)

                else:
                    dups[filehash] = [filepath]

    else:
        print("The file dosent exist")

    endTime = time.time()

    Scantime = endTime - startTime

    

    file, timing = logfile(dups)
    deletedfiles = deletefiles(dups)

    connected = connect.is_connected()

    if connected:
        Mailsender(argv[3],deletedfiles, cnt, file, Scantime, timing)    

    else:
        print("No internet connection")





def main():
    print("The name of the application is : ",argv[0])

    if len(argv)!=4:
        print("Error : Invalid number of arguments")
        exit()

    if (argv[1]=="-u") or (argv[1]=="-U"):
        print("Usage : Name_of_The_Script Absolute_path_of_Directory Time_interval MailID ")
        exit()

    if (argv[1]=="-h") or (argv[1]=="-H"):
        print("This script is used to delete all the duplicate files from the directory and send names of the files to a mail id")
        exit()

    mins = int(argv[2])

    schedule.every(mins).minutes.do(Filecheck,argv[1])

    while True:
        schedule.run_pending()
        time.sleep(1)
    
    

if __name__ == "__main__":
    main()
